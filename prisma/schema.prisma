generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id                            String                         @id @default(cuid())
//   firstName                     String?
//   lastName                      String?
//   email                         String?                        @unique
//   emailVerified                 DateTime?
//   userName                      String?                        @unique
//   phoneNo                       String?
//   imageUrl                      String?
//   password                      String?
//   balance                       Decimal?                       @default(0.00)
//   member                        Member[]
//   community                     Community?
//   PasswordTwoFactorConfirmation PasswordTwoFactorConfirmation?

//   communityId String?
//   referrer    Referrer?  @relation(fields: [referrerId], references: [id])
//   referrerId  String?
//   Referral    Referral[]
// }

// model Referrer {
//   id            String     @id @default(cuid())
//   referrerName  String
//   referrerLink  String     @unique
//   referredUsers User[]
//   referral      Referral[]
// }

// model Referral {
//   id             String   @id @default(cuid())
//   referrer       Referrer @relation(fields: [referrerId], references: [id])
//   referrerId     String
//   referredUserId String
//   referredUser   User     @relation(fields: [referredUserId], references: [id])
// }
model User {
  id                            String                         @id @default(cuid())
  firstName                     String?
  lastName                      String?
  email                         String?                        @unique
  emailVerified                 DateTime?
  userName                      String?                        @unique
  phoneNo                       String?
  imageUrl                      String?
  password                      String?
  balance                       Decimal?                       @default(0.00)
  member                        Member[]
  community                     Community?
  PasswordTwoFactorConfirmation PasswordTwoFactorConfirmation?

  communityId String?
  // referrer    User?   @relation("ReferralRelation", fields: [referrerId], references: [id])
  // referrerId  String?

  referrerLink ReferrerLink?
  referrals    Referral[]    @relation("ReferralRelation")

  Referral Referral[]
}

model ReferrerLink {
  id     String @id @default(cuid())
  link   String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Referral {
  id         String @id @default(cuid())
  referrer   User   @relation("ReferralRelation", fields: [referrerId], references: [id])
  referrerId String
  referred   User   @relation(fields: [referredId], references: [id])
  referredId String

  @@unique([referrerId])
}

// model Referrer {
//   id           String     @id @default(cuid())
//   referrerName String
//   referrerLink String     @unique
//   referrals    Referral[] @relation("ReferralToReferrer")
//   user         User[]
// }

// model Referral {
//   id         String   @id @default(cuid())
//   referrer   Referrer @relation("ReferralToReferrer", fields: [referrerId], references: [id])
//   referrerId String
// }

model PasswordTwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordTwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model EmailSubscribeSchema {
  id             String   @id @default(cuid())
  email          String   @unique
  isTermsEnabled Boolean? @default(false)
}

model FormMessage {
  id      String @id @default(cuid())
  name    String
  email   String
  phoneNo String
  subject String
  message String
}

model Community {
  id              String   @id @default(uuid())
  name            String
  communityMember Boolean? @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  members Member[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Message   Message[]

  @@unique([userId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(cuid())
  role MemberRole @default(GUEST)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([memberId, communityId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
